import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.markdown import hbold, hitalic, hlink
from generate_post import generate_posts
from parsers.epicgames import get_free_games
import os
from datetime import datetime
import pytz
from dotenv import load_dotenv
from post_history import add_to_history, is_game_posted, get_posted_games, remove_from_history
from steam_handler import (
    search_steam_games, get_steam_game_by_url,
    create_steam_search_keyboard, format_steam_post,
    steam_parser
)
import configparser
from pathlib import Path
from typing import Optional

load_dotenv()

config = configparser.ConfigParser()
config.read('settings.cfg', encoding='utf-8')

TIMEZONE = config.get('timezone', 'timezone', fallback='Europe/Moscow')
CHECK_INTERVAL = config.getint('check_interval', 'interval', fallback=3600)
STEAM_MIN_DISCOUNT = config.getint('steam', 'min_discount', fallback=50)

logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv('TG_BOT_TOKEN')
if not BOT_TOKEN:
    raise ValueError("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (TG_BOT_TOKEN)")

CHANNEL_ID = os.getenv('TG_CHANNEL_ID')
if not CHANNEL_ID:
    raise ValueError("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ID –∫–∞–Ω–∞–ª–∞ (TG_CHANNEL_ID)")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

def get_post_keyboard(post_id: str, game_info: dict = None) -> Optional[InlineKeyboardMarkup]:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ—Å—Ç–∞"""
    buttons = []
    
    if post_id:
        buttons.append([
            InlineKeyboardButton(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"post_{post_id}"),
            InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{post_id}")
        ])
    
    if game_info and game_info.get('status') == 'active':
        buttons.append([
            InlineKeyboardButton(text="üéÆ –ó–∞–±—Ä–∞—Ç—å –∏–≥—Ä—É", url=game_info['url'])
        ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons) if buttons else None

def format_game_post(game_info: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ—Å—Ç –æ–± –∏–≥—Ä–µ –∏—Å–ø–æ–ª—å–∑—É—è HTML —Ä–∞–∑–º–µ—Ç–∫—É"""
    start_date = datetime.fromisoformat(game_info['start_date'].replace('Z', '+00:00'))
    end_date = datetime.fromisoformat(game_info['end_date'].replace('Z', '+00:00'))
    msk_tz = pytz.timezone('Europe/Moscow')
    start_date_msk = start_date.astimezone(msk_tz).strftime("%d.%m.%Y %H:%M (–ú–°–ö)")
    end_date_msk = end_date.astimezone(msk_tz).strftime("%d.%m.%Y %H:%M (–ú–°–ö)")
    
    price = (f"{game_info['price']['RUB']['original']} ‚ÇΩ" 
             if game_info['price']['RUB']['original'] != -1 
             else f"${game_info['price']['USD']['original']}")
    
    status_tags = {
        'active': '#–∞–∫—Ç—É–∞–ª—å–Ω–æ',
        'upcoming': '#—Å–∫–æ—Ä–æ',
        'ended': '#–∑–∞–≤–µ—Ä—à–µ–Ω–æ'
    }
    
    publisher_text = '–û—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: ' + game_info['publisher']
    
    text = [
        "üéÆ " + hbold(game_info['title']),
        hitalic(publisher_text),
        "",
        hbold('‚è∞ –ü–µ—Ä–∏–æ–¥ —Ä–∞–∑–¥–∞—á–∏:'),
        "‚ñ´Ô∏è –ù–∞—á–∞–ª–æ: " + start_date_msk,
        "‚ñ´Ô∏è –ö–æ–Ω–µ—Ü: " + end_date_msk,
        "",
        "üí∞ " + hbold('–û–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞:') + " " + price,
        "üì• " + hbold('–°–µ–π—á–∞—Å:') + " –•–≤–∞—Ç–∞–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ! üéâ",
        "",
        "üîó " + hbold('–ó–∞–±—Ä–∞—Ç—å –∏–≥—Ä—É:'),
        game_info['url'],
        "",
        hitalic(
            "–î–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞—Ö —Å —Ä–µ–≥–∏–æ–Ω–æ–º –†–æ—Å—Å–∏—è üéâ" 
            if game_info['available_in_russia'] 
            else "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞—Ö —Å —Ä–µ–≥–∏–æ–Ω–æ–º –†–æ—Å—Å–∏—è üò¢"
        ),
        "",
        status_tags.get(game_info['status'], '') + " #egs"
    ]
    
    return "\n".join(text)

async def check_steam_deals():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∫–∏–¥–∫–∏ –≤ Steam"""
    try:
        search_results = steam_parser.search_games("free")
        
        for game in search_results:
            game_info = steam_parser.get_game_by_id(str(game['id']))
            if game_info and not is_game_posted(game_info['title']):
                if game_info['price']['discount'] >= STEAM_MIN_DISCOUNT:
                    formatted_text = format_steam_post(game_info)
                    await bot.send_photo(
                        chat_id=CHANNEL_ID,
                        photo=game_info['image_url'],
                        caption=formatted_text,
                        parse_mode=ParseMode.HTML
                    )
                    add_to_history(game_info, 'auto')
                    await asyncio.sleep(2)
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Steam: " + str(e))

async def check_ended_giveaways():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ä–∞–∑–¥–∞—á–∏"""
    try:
        posted_games = get_posted_games()
        current_time = datetime.now(pytz.UTC)
        
        for game in posted_games:
            try:
                end_time = datetime.fromisoformat(game['end_date'].replace('Z', '+00:00'))
                if current_time > end_time:
                    game['status'] = 'ended'
                    text = [
                        "üö´ " + hbold('–†–∞–∑–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'),
                        "",
                        "üéÆ " + hbold(game['title']),
                        "",
                        "–†–∞–∑–¥–∞—á–∞ —ç—Ç–æ–π –∏–≥—Ä—ã –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞.",
                        "",
                        "#–∑–∞–≤–µ—Ä—à–µ–Ω–æ \n#egs"
                    ]
                    
                    await bot.send_message(
                        chat_id=CHANNEL_ID,
                        text="\n".join(text),
                        parse_mode=ParseMode.HTML
                    )
                    
                    remove_from_history(game['title'])
                    logging.info("–£–¥–∞–ª–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Ä–∞–∑–¥–∞—á–∞: " + game['title'])
            except Exception as e:
                logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ä–∞–∑–¥–∞—á–∏ " + game['title'] + ": " + str(e))
                continue
                
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–∞–∑–¥–∞—á: " + str(e))

async def check_started_giveaways():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—á–∞–≤—à–∏–µ—Å—è —Ä–∞–∑–¥–∞—á–∏"""
    try:
        posted_games = get_posted_games()
        current_time = datetime.now(pytz.UTC)
        
        for game in posted_games:
            try:
                if game['status'] == 'upcoming':
                    start_time = datetime.fromisoformat(game['start_date'].replace('Z', '+00:00'))
                    if current_time >= start_time:
                        games = get_free_games()
                        game_info = next((g for g in games if g['title'] == game['title']), None)
                        
                        if game_info and game_info['status'] == 'active':
                            formatted_text = format_game_post(game_info)
                            await bot.send_photo(
                                chat_id=CHANNEL_ID,
                                photo=game_info['image_url'],
                                caption=formatted_text,
                                parse_mode=ParseMode.HTML,
                                reply_markup=get_post_keyboard(None, game_info)
                            )
                            
                            remove_from_history(game['title'])
                            add_to_history(game_info, 'auto')
                            
                            logging.info("–û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å —Ä–∞–∑–¥–∞—á–∏: " + game['title'])
            except Exception as e:
                logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞—á–∞–≤—à–µ–π—Å—è —Ä–∞–∑–¥–∞—á–∏ " + game['title'] + ": " + str(e))
                continue
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞—á–∞–≤—à–∏—Ö—Å—è —Ä–∞–∑–¥–∞—á: " + str(e))

async def periodic_checks():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–µ–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º"""
    while True:
        try:
            logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–∞–∑–¥–∞—á")
            await check_ended_giveaways()
            
            logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–≤—à–∏—Ö—Å—è —Ä–∞–∑–¥–∞—á")
            await check_started_giveaways()
            
            logging.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ Epic Games")
            games = get_free_games()
            if games:
                for game in games:
                    if not is_game_posted(game['title']):
                        formatted_text = format_game_post(game)
                        await bot.send_photo(
                            chat_id=CHANNEL_ID,
                            photo=game['image_url'],
                            caption=formatted_text,
                            parse_mode=ParseMode.HTML,
                            reply_markup=get_post_keyboard(None, game)
                        )
                        add_to_history(game, 'auto')
                        await asyncio.sleep(2)
            
            logging.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ Steam")
            await check_steam_deals()
            
            logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã, —Å–ª–µ–¥—É—é—â–∞—è —á–µ—Ä–µ–∑ " + str(CHECK_INTERVAL) + " —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(CHECK_INTERVAL)
            
        except Exception as e:
            logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: " + str(e))
            await asyncio.sleep(300)

@dp.message(Command("post"))
async def cmd_post(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤"""
    if str(message.from_user.id) != os.getenv('ADMIN_ID'):
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    try:
        logging.info("–ó–∞–ø—Ä–æ—Å —Ä—É—á–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤")
        games = get_free_games()
        
        if not games:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –∏–≥—Ä–∞—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        logging.info("–ü–æ–ª—É—á–µ–Ω–æ " + str(len(games)) + " –∏–≥—Ä –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
        preview_msg = await message.reply("üéÆ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–æ–≤:")
        
        for game in games:
            try:
                post_id = f"epic_games_{game['title'].lower().replace(' ', '_')}"
                formatted_text = format_game_post(game)
                
                posted_status = "‚úÖ –£–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ" if is_game_posted(game['title']) else "‚è≥ –ù–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ"
                formatted_text += f"\n\n{posted_status}"
                
                await bot.send_photo(
                    chat_id=message.chat.id,
                    photo=game['image_url'],
                    caption=formatted_text,
                    parse_mode=ParseMode.HTML,
                    reply_markup=get_post_keyboard(post_id)
                )
                await asyncio.sleep(1)
            except Exception as e:
                error_msg = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞ " + game['title'] + ": " + str(e)
                logging.error(error_msg)
                await message.reply(error_msg)
        
        await preview_msg.delete()
        
    except Exception as e:
        error_msg = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø–æ—Å—Ç–æ–≤: " + str(e)
        logging.error(error_msg)
        await message.reply(error_msg)

@dp.callback_query()
async def process_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    try:
        if callback_query.data == "steam_search_cancel":
            await callback_query.message.delete()
            await callback_query.answer("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω")
            return
            
        if callback_query.data.startswith('steam_page_'):
            if callback_query.data in ['steam_page_none', 'steam_page_current']:
                await callback_query.answer()
                return
                
            page = int(callback_query.data.split('_')[2])
            if not hasattr(bot, 'steam_search_results'):
                await callback_query.answer("–ü–æ–∏—Å–∫ —É—Å—Ç–∞—Ä–µ–ª, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫")
                return
                
            await callback_query.message.edit_reply_markup(
                reply_markup=create_steam_search_keyboard(bot.steam_search_results, page)
            )
            await callback_query.answer()
            return
            
        if callback_query.data.startswith('steam_select_'):
            app_id = callback_query.data.split('_')[2]
            game_info = await get_steam_game_by_url(f"https://store.steampowered.com/app/{app_id}/")
            
            if game_info:
                formatted_text = format_steam_post(game_info)
                await bot.send_photo(
                    chat_id=callback_query.message.chat.id,
                    photo=game_info['image_url'],
                    caption=formatted_text,
                    parse_mode=ParseMode.HTML,
                    reply_markup=get_post_keyboard(f"steam_{app_id}")
                )
                await callback_query.message.delete()
            else:
                await callback_query.answer("–û—à–∏–±–∫–∞: –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        action, post_id = callback_query.data.split('_', 1)
        
        if action == "delete":
            await callback_query.message.delete()
            await callback_query.answer("–ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω")
            
        elif action == "post":
            if post_id.startswith('steam_'):
                app_id = post_id.replace('steam_', '')
                game_info = steam_parser.get_game_by_id(app_id)
                if game_info:
                    formatted_text = format_steam_post(game_info)
                    await bot.send_photo(
                        chat_id=CHANNEL_ID,
                        photo=game_info['image_url'],
                        caption=formatted_text,
                        parse_mode=ParseMode.HTML,
                        reply_markup=get_post_keyboard(None, game_info)
                    )
                    add_to_history(game_info, 'manual')
                    await callback_query.message.delete()
                    await callback_query.answer("–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª")
            else:
                games = get_free_games()
                game_title = post_id.replace('epic_games_', '').replace('_', ' ')
                game_info = next((game for game in games if game['title'].lower() == game_title.lower()), None)
                
                if game_info:
                    formatted_text = format_game_post(game_info)
                    await bot.send_photo(
                        chat_id=CHANNEL_ID,
                        photo=game_info['image_url'],
                        caption=formatted_text,
                        parse_mode=ParseMode.HTML,
                        reply_markup=get_post_keyboard(None, game_info)
                    )
                    add_to_history(game_info, 'manual')
                    await callback_query.message.delete()
                    await callback_query.answer("–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª")
                else:
                    await callback_query.answer("–û—à–∏–±–∫–∞: –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: " + str(e))
        await callback_query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@dp.message(Command("steam_search"))
async def cmd_steam_search(message: types.Message):
    """–ü–æ–∏—Å–∫ –∏–≥—Ä—ã –≤ Steam –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    if str(message.from_user.id) != os.getenv('ADMIN_ID'):
        return
        
    query = message.text.replace('/steam_search', '').strip()
    if not query:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã")
        return
        
    games = await search_steam_games(query)
    if not games:
        await message.reply("–ò–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
        
    await message.reply(
        "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:",
        reply_markup=create_steam_search_keyboard(games)
    )

@dp.message(Command("steam_url"))
async def cmd_steam_url(message: types.Message):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –¥–ª—è –∏–≥—Ä—ã Steam –ø–æ URL"""
    if str(message.from_user.id) != os.getenv('ADMIN_ID'):
        return
        
    url = message.text.replace('/steam_url', '').strip()
    if not url or 'store.steampowered.com' not in url:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä—É –≤ Steam")
        return
        
    game_info = await get_steam_game_by_url(url)
    if not game_info:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ")
        return
        
    formatted_text = format_steam_post(game_info)
    await bot.send_photo(
        chat_id=message.chat.id,
        photo=game_info['header_image'],
        caption=formatted_text,
        parse_mode=ParseMode.HTML,
        reply_markup=get_post_keyboard(f"steam_{game_info['steam_appid']}")
    )

@dp.callback_query(lambda c: c.data.startswith('steam_page_'))
async def process_steam_page(callback_query: types.CallbackQuery):
    page = int(callback_query.data.split('_')[2])
    if not hasattr(bot, 'steam_search_results'):
        await callback_query.answer("–ü–æ–∏—Å–∫ —É—Å—Ç–∞—Ä–µ–ª, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫")
        return
        
    await callback_query.message.edit_reply_markup(
        reply_markup=create_steam_search_keyboard(bot.steam_search_results, page)
    )

async def send_help_message(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é"""
    help_text = [
        hbold('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:'),
        "",
        "/post - –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–∞–∑–¥–∞—á Epic Games",
        "/steam_search [–Ω–∞–∑–≤–∞–Ω–∏–µ] - –ü–æ–∏—Å–∫ –∏–≥—Ä—ã –≤ Steam",
        "/steam_url [—Å—Å—ã–ª–∫–∞] - –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ –∏–≥—Ä—É Steam",
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        "",
        hbold('üîç –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫:'),
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ Steam",
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä—É Steam –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞"
    ]
    
    await message.reply(
        "\n".join(help_text), 
        parse_mode=ParseMode.HTML
    )

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if str(message.from_user.id) != os.getenv('ADMIN_ID'):
        return
    await send_help_message(message)

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    if str(message.from_user.id) != os.getenv('ADMIN_ID'):
        return
    await send_help_message(message)

@dp.message()
async def handle_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if str(message.from_user.id) != os.getenv('ADMIN_ID'):
        return
        
    text = message.text.strip()
    
    if 'store.steampowered.com' in text:
        game_info = await get_steam_game_by_url(text)
        if not game_info:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ")
            return
            
        formatted_text = format_steam_post(game_info)
        await bot.send_photo(
            chat_id=message.chat.id,
            photo=game_info['image_url'],
            caption=formatted_text,
            parse_mode=ParseMode.HTML,
            reply_markup=get_post_keyboard(f"steam_{game_info['steam_appid']}")
        )
    
    else:
        games = await search_steam_games(text)
        if not games:
            await message.reply("–ò–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
            
        bot.steam_search_results = games
        
        await message.reply(
            "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:",
            reply_markup=create_steam_search_keyboard(games)
        )

async def main():
    asyncio.create_task(periodic_checks())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
